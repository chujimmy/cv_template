name: Generate CVs

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  cv:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Github repository
        id: github_checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"
      - name: Run Docker container
        id: docker_run
        run: docker-compose up -d --force-recreate
      - name: Set output
        id: output_set
        run: |
          echo "file_date=$(date +'%Y_%m_%d')" >> $GITHUB_OUTPUT
          echo "cv_output_file_pattern=$(docker exec cv bash -c 'echo $CV_OUTPUT_FILE_PATTERN')" >> $GITHUB_OUTPUT
          echo "letter_output_file_pattern=$(docker exec cv bash -c 'echo $LETTER_OUTPUT_FILE_PATTERN')" >> $GITHUB_OUTPUT
          echo "first_name=$(docker exec cv bash -c 'echo $FIRST_NAME')" >> $GITHUB_OUTPUT
          echo "last_name=$(docker exec cv bash -c 'echo $LAST_NAME')" >> $GITHUB_OUTPUT
          echo "output_folder=$(docker exec cv bash -c 'echo $OUTPUT_FOLDER')" >> $GITHUB_OUTPUT
      - name: Generate files
        id: file_generate
        run: >
          cv_counter=0 &&
          while [[ $(find . -regextype sed -regex ".*/lang/[a-z]\{2\}/cv.tex" | wc -l ) -gt $(find . -name "cv.pdf" | wc -l ) && $cv_counter -le 60 ]]; do
            echo "Waiting for CVs pdf files to be generated..."
            ((cv_counter++))
            sleep 1
          done && 
          letter_counter=0 &&
          while [[ $(find . -regextype sed -regex ".*/lang/[a-z]\{2\}/letter.tex" | wc -l ) -gt $(find . -name "letter.pdf" | wc -l ) && $letter_counter -le 60 ]]; do
            echo "Waiting for cover letters pdf files to be generated..."
            ((letter_counter++))
            sleep 1
          done && 
          if [[ $cv_counter -ge 60 && $letter_counter -ge 60 ]]; then
            echo "Timeout while waiting pdf files to be generated. Abort"
            exit 1
          fi
      - name: Prepare File
        id: file_prepare
        run: >
          mkdir -p ${{ steps.output_set.outputs.output_folder}} && 
          CV_OUTPUT_FILE_PATTERN=${{ steps.output_set.outputs.cv_output_file_pattern}} &&
          LETTER_OUTPUT_FILE_PATTERN=${{ steps.output_set.outputs.letter_output_file_pattern}} &&
          FULL_NAME=${{ steps.output_set.outputs.first_name}}_${{ steps.output_set.outputs.last_name}} && 
          find . -name "cv.pdf" | while read FILE_NAME; do
            [[ $FILE_NAME =~ .*/([a-z]*)/cv.pdf ]]
            LANG=${BASH_REMATCH[1]}
            NEW_FILE_NAME="${LANG}_${CV_OUTPUT_FILE_PATTERN}_${FULL_NAME}_${{ steps.output_set.outputs.file_date }}.pdf"
            cp $FILE_NAME ./${{ steps.output_set.outputs.output_folder}}/${NEW_FILE_NAME,,}
          done &&
          find . -name "letter.pdf" | while read FILE_NAME; do
            [[ $FILE_NAME =~ .*/([a-z]*)/letter.pdf ]]
            LANG=${BASH_REMATCH[1]}
            NEW_FILE_NAME="${LANG}_${LETTER_OUTPUT_FILE_PATTERN}_${FULL_NAME}_${{ steps.output_set.outputs.file_date }}.pdf"
            cp $FILE_NAME ./${{ steps.output_set.outputs.output_folder}}/${NEW_FILE_NAME,,}
          done
      - name: Upload File to Artifact
        id: file_upload_artifact
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          name: cv
          path: ${{ steps.output_set.outputs.output_folder }}/*
          if-no-files-found: error
          retention-days: 5
      - name: Create zip
        id: zip_create
        run: |
          zip -r -j cv.zip ${{ steps.output_set.outputs.output_folder }}/*
      - name: Create new tag
        id: tag_create
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false
          RELEASE_BRANCHES: main
      - name: Create release
        id: release_create
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: softprops/action-gh-release@v1
        with:
          files: cv.zip
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.tag_create.outputs.new_tag }}
          body: |
            New changes:
            - ${{ github.event.head_commit.message }}
